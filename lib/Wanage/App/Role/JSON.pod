=head1 NAME

Wanage::App::Role::JSON - Wanage application - JSON module

=head1 SYNOPSIS

  package My::Wanage::App;
  use base qw(Wanage::App Wanage::App::Role::JSON);

  $app = My::Wanage::App->new_from_http ($http);
  print Dumper $app->request_json;
  $app->send_json ({hoge => 'fuga'});

=head1 DESCRIPTION

The C<Wanage::App::Role::JSON> module defines additional methods for
handling JSON data in L<Wanage::App> API.  This module is intended to
be used a superclass of some subclass of L<Wanage::App>.

=head1 METHODS

=over 4

=item $data = $app->request_json

Decode JSON data in the request-body and return it.  If there is no
request-body, or if the request-body is not a JSON data, the C<undef>
value is returned.

This method does not check the value of the C<Content-Type:> header.
It should be done by the application if it is desired or forced to
check the value of the header by appropriate specifications.

=item $app->send_json ($data)

Send the given data, encoded in JSON format, as the response-body.
The data must be a value that can be encoded into JSON by L<JSON::XS>.

The C<Content-Type:> header is set to C<application/json>.

=back

=head1 SEE ALSO

L<JSON::Functions::XS>.

RFC 4627 - The application/json Media Type for JavaScript Object
Notation (JSON) <http://tools.ietf.org/html/rfc4627>.

L<Wanage::App>.

=head1 AUTHOR

Wakaba <w@wuika.fam.cx>.

=head1 LICENSE

Copyright 2012 Wakaba <w@suika.fam.cx>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
