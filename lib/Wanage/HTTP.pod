=head1 NAME

Wanage::HTTP - HTTP interface for Wanage Web applications

=head1 SYNOPSIS

  my $http = Wanage::HTTP->new_cgi;
  my $http = Wanage::HTTP->new_from_psgi_env ($env);
  
  print $http->url->stringify;
  print $http->query_param->{mode};
  print $http->request_method;
  print $http->get_request_header ('Accept-Language');
  print ${$http->response_body_as_ref};
  
  return $http->send_response (onready => sub {
    $http->set_status (302, 'Go to next page');
    $http->add_response_header ('Content-Language' => 'en');
    $http->send_response_body_as_text ("Hello\x{3002}");
    $http->send_response_body_as_ref (\$binary);
    $http->close_response_body;
  });

=head1 DESCRIPTION

The C<Wanage::HTTP> module provides APIs to interpret HTTP request
message and generate HTTP response message, using the underlying
interface for server-application communication, including CGI and
PSGI.

=head1 METHODS

=head2 Constructors

There are two constructors for the HTTP object, depending on the
interface between the HTTP server and the application:

=over 4

=item $http = Wanage::HTTP->new_cgi

Create a new HTTP object with the current CGI environment.

=item $http = Wanage::HTTP->new_from_psgi_env ($env)

Create a new HTTP object with a PSGI "environment" hash reference.  A
typical PSGI application implemented using Wanage would look like:

  sub {
    my $env = shift;
    my $http = Wanage::HTTP->new_from_psgi_env ($env);
    
    return $http->send_response (onready => sub {
      $http->set_status (200);
      $http->send_response_body ("OK");
      $http->close_response_body;
    });
  };

=back

=head2 Request URL

=over 4

=item $url = $http->url

Return the L<Wanage::URL> object representing the canonicalized
variant of the URL requested by the client.

=item $url = $http->original_url

Return the L<Wanage::URL> object representing the original URL
requested by the client.  Please note that Wanage assumes the URL is a
string encoded in UTF-8 character string.  If the request URL supplied
by the client contains a bare (or percent-decoded) non-ASCII character
encoded in the encoding different from UTF-8, they would be converted
into sequence of C<U+FFFD> C<REPLACEMENT CHARACTER> or other
unintentional characters.

=item $params = $http->query_params

Return the hash reference which contains name-value pairs contained in
the C<query> component of the request URL, interpreted as
C<application/x-www-form-urlencoded>.  The values in the hash are
represented as array references of values to preserve duplicate
parameters in the query.  The values are B<byte strings> and not
decoded by any character encoding.

=back

=head2 Request method

=over 4

=item $method = $http->request_method

Return the HTTP method name of the request.

If it is one of the methods whose name is compared ASCII
case-insensitively in the XHR specification
<http://dvcs.w3.org/hg/xhr/raw-file/tip/Overview.html#dom-xmlhttprequest-open>,
the returned method name is normalized to uppercase.  Otherwise, the
original case is preserved.  This is a willful violation to the HTTP
specification.

=item BOOL = $http->request_method_is_safe

Return whether the request method is "safe" or not, per relevant
specifications.  Methods C<GET> and C<HEAD> are safe.

=item BOOL = $http->request_method_is_idempotent

Return whether the request method is idempotent or not, per relevant
specifications.  Methods including C<GET>, C<PUT>, and C<HEAD> are
idempotent.

=back

=head2 Request headers

In Wanage, terms I<header> and C<headers> are used to refer a header
field and an entire header, respectively.  This is a willful violation
to HTTP and MIME specifications for consistency of terminology with
Web standard specifications and APIs such as XHR.

=over 4

=item $value = $http->get_request_header ($name)

Return the value of the request header whose name is given as the
argument.  If there is no header with the name, or is not provided by
the server, the C<undef> value is returned instead.  Header names are
ASCII case-insensitive.

Depending on the interface specification and the server implementation
in use, not all HTTP request headers could be accessed from this
method.  For example, the CGI specification recommend the server not
to provide the HTTP C<Authorization:> header field to the application.
Moreover, even when a field value is provided, it might not contain
the exact value provided by the client in the HTTP request headers.
For example, the C<Content-Length:> header value returned by this
method is the value of the C<CONTENT_LENGTH> when the PSGI interface
is used and the value would be the one calculated by the server, not
the client.

If there are multiple headers with the same name, their values are
concatenated by a C<,> character.

Please note that the header values are byte strings, not character
strings.

=item $ip = $http->client_ip_addr

Return the L<Wanage::HTTP::ClientIPAddr> object representing the IP
address of the client.

You can use a subclass of L<Wanage::HTTP::ClientIPAddr> for the client
IP address object by setting the C<$Wanage::HTTP::ClientIPAddrClass>
variable.  See L<Wanagr::HTTP::ClientIPAddr> for more information.

=item $ua = $http->ua

Return the L<Wanage::HTTP::UA> object representing the HTTP
C<User-Agent> header value of thre request.

You can use a subclass of L<Wanage::HTTP::UA> for the client IP
address object by setting the C<$Wanage::HTTP::UAClass> variable.  See
L<Wanagr::HTTP::UA> for more information.

=item $mime = $http->request_mime_type

Return the L<Wanage::HTTP::MIMEType> object representing the
C<Content-Type:> header of the request message.

=item $list = $http->accept_langs

Return the list of language tags accepted by the client through the
HTTP C<Accept-Language:> header.

The list is a L<List::Ish> object where items are language tags or the
C<*> value.  Items are ordered by their qvalues (i.e. C<q> parameter
values), if any.  Items whose qvalues are zero, as well as
duplications, syntactically illegal language tags, are excluded from
the list.  If no acceptable language is requested by the client, the
list is empty.

Language tags are normalized in their lowercase forms.  This is a
willful violation to the spirit of IETF Language Tag specification
(BCP 47) which defines more complex recommendations on case-folding.

Applications should not modify the list itself.

=item $cookies = $http->request_cookies

Return the list of cookie-pairs sent by the client.

The list is a hash reference where key-value pairs represent
cookie-pairs in the request.  Cookie-pairs with empty cookie name or
no cookie value are ignored.  If there are multiple cookie-pairs with
same cookie name, only the first cookie-pair is included in the list.
No application-specific decoding of cookie values are performed by
this method.  Cookie names and values are both represented as byte
(not character) strings.

Applications should not modify the hash reference.

=item $auth = $http->request_auth

Return a hash reference containing the authorization data contained in
the C<Authorization:> header of the request.

Please note that some data source such as CGI does not provide HTTP
C<Authorization:> request header to the application.

If the request contains the authorization data with an C<auth-scheme>
supported by Wanage, the hash reference contains the C<auth_scheme>
key, whose value is set to the lowercase-normalized form of the
C<auth-scheme>.

If the C<auth_scheme> value is C<basic>, the C<Authorization:> header
contains C<basic-credentials>.  In this case the array reference
contains keys C<userid> and C<password>.  If the credentials contains
no password (which violates the HTTP spec), the C<password> key is set
to the C<undef> value.  Otherwise, these keys contain values of
C<userid> and C<password>, respectively, in the C<basic-credentials>.
They are byte strings.

At the time of writing, no other C<auth-scheme> is supported.

=item $hashref = $http->request_cache_control

Parse the C<Cache-Control:> header of the request and return the
result as a hash reference.

If a cache-directive is included in the headers, its name, normalized
to lowercase, is included in the hash as a key.  If the
cache-directive has a value specified in the headers, the value is
used as the value corresponding to the key in the hash.  If the
cache-directive is specified multiple times with values, they are
concatenated by C<,> in order (At the time of writing, however, no
cache-directive is explicitly allowed to appear multiple times in an
HTTP request).  Otherwise, i.e. the cache-directive has no value, the
value corresponding to the key in the hash is C<undef>.

If the request has no C<Cache-Control:> header, an empty hash
reference is returned.

=item BOOL = $http->is_superreload

Return whether the request is a "super-reload" or not.  This is
equivalent to C<< exists $http->request_cache_control->{'no-cache'}
>>.

=item $time = $http->request_ims

Return the time specified by the C<If-Modified-Since:> header, if any,
in the Unix epoch (or time_t) integer, or the C<undef> value.

=back

=head2 Request body

=over 4

=item $ref = $http->request_body_as_ref

Return a reference to the response body.  If there is the response
body provided by the client, a reference to that byte string is
returned.  Otherwise, the C<undef> value is returned.

=item $params = $http->request_body_params

Return the hash reference which contains name-value pairs contained in
the request body, if the MIME type of the body is
C<application/x-www-form-urlencoded>.

The values in the hash are represented as array references of values
to preserve duplicate parameters in the query.  The values are B<byte
strings> and not decoded by any character encoding.

If there is no request body, or if the MIME type of the request body
is different from C<application/x-www-form-urlencoded>, an empty hash
reference is returned.

Applications should not modify the hash reference.

=back

=head2 Response

The following methods can be used to construct and send the response
message to the server (and then to client).  Please note that it's
application's responsibility to generate a message that conforms to
the relevenant specificaitons (i.e. the HTTP specification and
server-application interface (e.g. CGI) specifications), otherwise
broken or sometimes vulnerable message might be sent to the client.
Although Wanage attempts not to generate completely broken, insecure
message by e.g. replacing any newline character in header values to
prevent from another header injected by malicious user input,
applications should not rely on this behavior.

=over 4

=item $http->set_status ($code, $reason)

Set the HTTP status code and reason phrase for the response.  The
reason phrase argument is optional.

Please note that some interface does not support reason pharse and is
ignored.

=item $http->set_response_header ($name => $value)

Register an HTTP header name-value pair for the response.  If there is
any existing name-value pairs with the same header name, they are
replaced by the new pair.

=item $http->add_response_header ($name => $value)

Register an HTTP header name-value pair for the response, without
discarding existing headers.

=item $mime = $http->response_mime_type

Return the L<Wanage::HTTP::MIMEType> object representing the
C<Content-Type:> header of the response message.

You can modify the object to alter the value of the C<Content-Type:>
header.

=item $http->set_response_cookie ($name => $value, %args)

Set a cookie-pair by adding a C<Set-Cookie:> header to the response.

The first argument must be a valid cookie name, i.e. an HTTP token.
In particular, it can only contain printable ASCII characters and
cannot contain white space characters, C<">, C<=>, C<;>, and C<,>.

The second argument must be a valid cookie value or the C<undef>
value.  If it is not the C<undef> value, it must be a string of zero
ore more printable ASCII characters.  In particular, it cannot contain
white space characters, C<;>, and C<,>.  In addition, you cannot use
the C<"> character other than quoting the entire string.  The C<undef>
value can be used to specify that the cookie should be discarded by
the client.  It is equivalent to setting the C<expires> option to a
past date.

Following additional name-value pairs can be specified to set cookie
attributes:

=over 4

=item expires => $seconds

Set the expiry date-time of the cookie by cookie's C<Expires>
attribute.  The value must be a Unix epoch (time_t) of the date-time.

Please note that Wanage does not support cookie C<Max-Age> attribute
as it is redundant with C<Expires> attribute.

=item domain => $domain

Set the applicable hosts of the cookie by cookie's C<Domain>
attribute.  The value must be a valid (ASCII) domain name.

=item path => $path

Set the applicable path's directory by cookie's C<Path> attribute.
The value must be a valid (ASCII) path string.

=item secure => boolean

If true, set the "secure" flag by cookie's C<Secure> attribute.

=item httponly => boolean

If true, set the "httponly" flag by cookie's C<HttpOnly> attribute.

=back

=item $http->set_response_auth ($auth_scheme, %args)

Add a C<WWW-Authenticate:> header with the specified C<auth-scheme>.

The first argument specifies the C<auth-scheme>.  It must be C<basic>
(in lowercase).

In addition, more options can be specified as name-value pairs.  The
C<realm> option specifies the C<realm=""> C<auth-param>, i.e. a short
string representing the protection space.  It must be a (possibly
empty) string of printable ASCII characters except for C<"> and C<\>.

If the C<auth-scheme> is C<basic>, it represents the Basic
authentication.  No additional options can be specified.

=item $http->set_response_last_modified ($time)

Set the C<Last-Modified:> header with the specified timestamp.  The
timestamp must be a Unix epoch (time_t) value.

=item $http->send_response_headers

Send status code, reason phrase, and response headers to the server.
Once they are sent to the server, they can no longer be altered by the
methods above.  Exactly when they are sent to the server (and then the
client) depends on the interface.  This method can be invoked only
once.

=item $http->send_response_body_as_text ($text)

Send a text of character strings as part of the response body, by
encoding in UTF-8.

This method can be invoked more than once to send multiple fragments
of response body text.

The C<send_response_headers> method is implicitly invoked by this
method if it is not invoked yet.

=item $http->send_response_body_as_ref ($ref)

Send a byte string referenced by the argument, as part of the response
body.

This method can be invoked more than once to send multiple fragments
of response body.

The C<send_response_headers> method is implicitly invoked by this
method if it is not invoked yet.

=item $http->close_response_body

Notify of the interface that there is no more response body to send to
the client.  Once this method is invoked, you can't send response body
data to the server anymore.

The C<send_response_headers> method is implicitly invoked by this
method if it is not invoked yet.

=item $return = $http->send_response (onready => CODE)

The C<send_response> method can be used as the "wrapper" of the code
to construct the response.  The C<onready> named parameter takes a
code reference, which is invoked, if specified, once the server is
ready to receive the response.

Return values depend on the interface in use.  If the interface is
CGI, the method return no value.  If the interface is PSGI, the method
return a value that should be returned by the PSGI application to the
server.  If the PSGI server supports streaming (i.e. C<psgi.streaming>
is true), the C<onready> handler is invoked within the code returned
by the method.  Otherwise, the handler is invoked directly by the
method synchronously.  Therefore, if you use the C<onready> handler,
you should not rely on exactly when the code is executed.

=back

=head1 NOTES ON HTTP PARSING

At the time of writing, there is no spec defining parsing rules for
HTTP messages and their headers.  For headers with no applicable
parsing specification, Wanage intends to provide a lightweight
implementation that is compatible with HTTP messages generated by user
agents and with parsing rules of major servers, and support of
rarely-used HTTP constructs might be omitted as long as it would lead
critical misinterpretation of the message.  For example,
C<quoted-pair>s in C<quoted-string>s are not supported in most
headers, as it seems not significant for Web compatibility.

=head1 SEE ALSO

RFC 2616 - Hypertext Transfer Protocol -- HTTP/1.1
<http://tools.ietf.org/html/rfc2616>.

RFC 2617 - HTTP Authentication: Basic and Digest Access Authentication
<http://tools.ietf.org/html/rfc2617>.

XMLHttpRequest <http://dvcs.w3.org/hg/xhr/raw-file/tip/Overview.html>.

RFC 3875 - The Common Gateway Interface (CGI) Version 1.1
<http://tools.ietf.org/html/rfc3875>.

SuikaWiki:CGI <http://suika.fam.cx/~wakaba/wiki/sw/n/CGI>.

PSGI specification <http://search.cpan.org/dist/PSGI/PSGI.pod>.

MIME Sniffing <http://mimesniff.spec.whatwg.org/>.

BCP 47 - Language Tags <http://tools.ietf.org/html/bcp47>.

=head1 AUTHOR

Wakaba <w@suika.fam.cx>.

=head1 LICENSE

Copyright 2012 Wakaba <w@suika.fam.cx>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
